{"version":3,"sources":["components/Header/index.jsx","components/SearchBar/index.jsx","components/EmployeeTable/index.jsx","utils/API.js","components/Container/EmployeesContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchBar","props","onSubmit","handleFormSubmit","value","name","onChange","handleInputChange","type","placeholder","EmployeeTable","scope","data-field","data-sortable","onClick","sortBy","state","filteredEmployees","map","employee","first","last","fullName","dob","formatDate","date","key","login","uuid","src","picture","thumbnail","alt","href","phone","email","axios","get","EmployeesContainer","search","employees","sortDirections","initialSortDirections","event","target","setState","filterEmployees","toLowerCase","trim","preventDefault","primary","secondary","sortedEmployees","reverse","sort","a","b","localeCompare","input","filter","concat","includes","replace","Date","push","getMonth","slice","getDate","getFullYear","join","API","then","res","data","results","catch","err","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7557a0b4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1 className=\"text-center\">Employee Directory</h1>\r\n      <p className=\"text-center\">\r\n        Click on column headers to filter by heading or use the search box to narrow\r\n        your results.\r\n      </p>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst SearchBar = (props) => {\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-black justify-content-center\">\r\n      <form className=\"form-inline m-2\" onSubmit={props.handleFormSubmit}>\r\n        <input\r\n          className=\"form-control\"\r\n          value={props.value}\r\n          name=\"search\"\r\n          onChange={props.handleInputChange}\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n        />\r\n      </form>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst EmployeeTable = (props) => {\r\n  return (\r\n    <table className=\"table table-striped table-sortable text-center\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Image</th>\r\n          <th scope=\"col\" data-field=\"name\" data-sortable=\"true\">\r\n            <span onClick={() => props.sortBy(\"name\", \"last\", \"first\")}>\r\n              Name\r\n            </span>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <span onClick={() => props.sortBy(\"phone\")}>Phone</span>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <span onClick={() => props.sortBy(\"email\")}>Email</span>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <span onClick={() => props.sortBy(\"dob\", \"date\")}>DOB</span>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.state.filteredEmployees.map((employee) => {\r\n          const { first, last } = employee.name;\r\n          const fullName = `${first} ${last}`;\r\n\r\n          const dob = props.formatDate(employee.dob.date);\r\n\r\n          return (\r\n            <tr key={employee.login.uuid}>\r\n              <td>\r\n                <img src={employee.picture.thumbnail} alt={fullName} />\r\n              </td>\r\n              <td className=\"align-middle\">{fullName}</td>\r\n              <td className=\"align-middle\">\r\n              <a href={`tel:+1${employee.phone}`}>{employee.phone}</a></td>\r\n              <td className=\"align-middle email\">\r\n                <a href={`mailto:${employee.email}`}>{employee.email}</a>\r\n              </td>\r\n              <td className=\"align-middle\">{dob}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default EmployeeTable;\r\n","import axios from \"axios\";\r\n\r\nconst URL = \"https://randomuser.me/api/?results=50&nat=us\"\r\n\r\nexport default {\r\n    getEmployees: function() {\r\n        return axios.get(URL);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport SearchBar from \"../SearchBar\";\r\nimport EmployeeTable from \"../EmployeeTable\";\r\nimport API from \"../../utils/API\";\r\n\r\nclass EmployeesContainer extends Component {\r\n  state = {\r\n    search: \"\",\r\n    employees: [],\r\n    filteredEmployees: [],\r\n    sortDirections: this.initialSortDirections,\r\n  };\r\n\r\n  get initialSortDirections() {\r\n    return {\r\n      name: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      dob: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.getEmployees()\r\n      .then((res) =>\r\n        this.setState({\r\n          employees: res.data.results,\r\n          filteredEmployees: res.data.results,\r\n        })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ search: value });\r\n    this.filterEmployees(value.toLowerCase().trim());\r\n  };\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  sortBy = (key, primary = 0, secondary = 0) => {\r\n    let sortedEmployees = this.state.filteredEmployees;\r\n    if (this.state.sortDirections[key]) {\r\n      this.setState({\r\n        filteredEmployees: sortedEmployees.reverse(),\r\n        sortDirections: {\r\n          ...this.initialSortDirections,\r\n          [key]: this.state.sortDirections[key] === \"asc\" ? \"desc\" : \"asc\",\r\n        },\r\n      });\r\n    } else {\r\n      sortedEmployees = this.state.filteredEmployees.sort((a, b) => {\r\n        a = a[key];\r\n        b = b[key];\r\n\r\n        if (primary) {\r\n          if (secondary && a[primary] === b[primary]) {\r\n            return a[secondary].localeCompare(b[secondary]);\r\n          }\r\n          return a[primary].localeCompare(b[primary]);\r\n        } else {\r\n          return a.localeCompare(b);\r\n        }\r\n      });\r\n\r\n      this.setState({\r\n        filteredEmployees: sortedEmployees,\r\n        sortDirections: {\r\n          ...this.initialSortDirections,\r\n          [key]: \"asc\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  filterEmployees = (input) => {\r\n    if (input) {\r\n      this.setState({\r\n        filteredEmployees: this.state.employees.filter((employee) => {\r\n          return (\r\n            employee.name.first\r\n              .toLowerCase()\r\n              .concat(\" \", employee.name.last.toLowerCase())\r\n              .includes(input) ||\r\n            employee.phone.includes(input) ||\r\n            employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(input) ||\r\n            employee.email.includes(input) ||\r\n            this.formatDate(employee.dob.date).includes(input)\r\n          );\r\n        }),\r\n      });\r\n    } else {\r\n      this.setState({ filteredEmployees: this.state.employees });\r\n    }\r\n  };\r\n\r\n  formatDate = (date) => {\r\n    date = new Date(date);\r\n    let dob = [];\r\n    dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\r\n    dob.push((\"0\" + date.getDate()).slice(-2));\r\n    dob.push(date.getFullYear());\r\n\r\n    return dob.join(\"-\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <SearchBar\r\n          value={this.state.search}\r\n          handleInputChange={this.handleInputChange}\r\n          handleFormSubmit={this.handleFormSubmit}\r\n        />\r\n        <div className=\"container mt-4\">\r\n          <EmployeeTable\r\n            state={this.state}\r\n            sortBy={this.sortBy}\r\n            filterEmployees={this.filterEmployees}\r\n            formatDate={this.formatDate}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeesContainer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport EmployeesContainer from \"./components/Container/EmployeesContainer\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <EmployeesContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}